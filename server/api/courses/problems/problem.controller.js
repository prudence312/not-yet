'use strict';

import Problem from './problem.model';
import config from './../../../config/environment';
let logger = require('./../../../config/bunyan'); //path to my logger
import mongoose from 'mongoose';

export function index(req, res) {
  console.log(config.problemEngineUrl);
  Problem.find()
    .exec()
    .then(function(problems) {
      return res.status(200).json(problems);
    })
    //Print errors
    .catch(function(err) {
      res.status(500);
      res.send(err);
    });
}

export function show(req, res) {
  Problem.findById(req.params.id)
    .exec()
    .then(function(problem) {
      if (problem) {
        return res.status(200).json(problem);
      } else {
        return res.status(204).end();
      }
    })
    .catch(function() {
      return res.status(404).end();
    });
}

//Formatting the problem engine ID to be a valid MongoDB ID
function makeValidObjectID(inputStr) {
  inputStr = inputStr.toString();
  if (inputStr.length >= 24) {
    return inputStr.substring(0, 24);
  } else {
    var neededChars = 24 - inputStr.length;
    var crypto = require('crypto');
    var remainingChars = crypto.randomBytes(neededChars).toString('hex');
    var outputStr = inputStr + remainingChars;
    return outputStr.substring(0, 24);
  }
}

export function create(req) {
  const axios = require('axios');

  return new Promise(function(resolve, reject) {
    axios
      .post(config.problemEngineUrl, req)
      .then(function(response) {
        var problem = new Problem();

        //making sure the problem id on our database is the same as the
        //problem id generated by the problem engine
        // Due to Mongo restrictions, the IDs won't be the same, but a Mongo Problem ID
        // Will have a 1-to-1 correlation with a Problem Engine ID, i.e We won't have duplicate
        //problems in our collection

        var problemEngineId = response.data.problem.problemId;
        var validProblemId = makeValidObjectID(problemEngineId);
        logger.debug(validProblemId + ' ' + response.data.problem.category);

        problem._id = mongoose.Types.ObjectId(validProblemId);

        problem.problem.description = JSON.parse(
          JSON.stringify(response.data.problem.description)
        );
        problem.problem.solution = JSON.parse(
          JSON.stringify(response.data.problem.solution)
        );
        problem.problem.problemId = problemEngineId;
        problem.instructions = response.data.instructions;
        problem.problem.subject = response.data.problem.subject;
        problem.problem.category = response.data.problem.category;
        problem.problem.depth = response.data.problem.depth;

        resolve(problem.save());
      })
      .catch(function(err) {
        logger.error(err);
        reject('Could not instantiate Axios ' + err);
      });
  });
}
